
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BACKSLASH CHAR CLOSE COMMENT ENCLOSEDNAME EQUAL EXISTS FORALL HEXA ID IF IFF IMPORTS INDISCOURSE INNERBACKSLASH INNERNAMEQUOTE INNERSTRINGQUOTE NAMECHARSEQUENCE NAMEQUOTE NOT NUMERAL OPEN OR OUTDISCOURSE PREFIX QUOTEDSTRING RESTRICT SEQMARK STRINGQUOTE TEXT TITLING\nextended_text : texts\n    | statements\n    | sentences\n\ntexts : text texts\ntexts : text\n\ntext : textconstruction\n    | domainrestriction\n    | importation\n    | commenttext\n\ntextconstruction : OPEN TEXT constructed_texts CLOSE\n\nconstructed_texts : constructed_text constructed_texts\nconstructed_texts : constructed_text\n\nconstructed_text    : sentence\n                    | statement\n                    | text\n\nstatements : statement statements\nstatements : statement\n\nstatement : titling\nstatement : discoursestatement\nstatement : OPEN COMMENT QUOTEDSTRING statement CLOSE\n\ndiscoursestatement  : indiscourse\n                    | outdiscourse\n\nindiscourse : OPEN INDISCOURSE terms CLOSE\n\noutdiscourse : OPEN OUTDISCOURSE terms CLOSE\n\ndomainrestriction : OPEN RESTRICT term text CLOSE\n\nimportation : OPEN IMPORTS interpretablename CLOSE\n\ncommenttext : OPEN COMMENT QUOTEDSTRING texts CLOSE\ncommenttext : OPEN COMMENT QUOTEDSTRING prefixdeclarations texts CLOSE\n\nprefixdeclarations : prefixdeclaration prefixdeclarations\nprefixdeclarations : prefixdeclaration\n\nprefixdeclaration : OPEN PREFIX QUOTEDSTRING interpretablename CLOSE\n\ntitling : OPEN TITLING interpretablename text CLOSE\n\nsentence :  atomsent\n    | boolsent\n    | existential_quantsent\n    | universal_quantsent\n    | commentsent\n\natomsent :  equation\n    | atom\n\nboolsent : and_sent\n    | or_sent\n    | if_sent\n    | iff_sent\n    | not_sent\n\nand_sent : OPEN AND sentences CLOSE\n\nor_sent : OPEN OR sentences CLOSE\n\nif_sent : OPEN IF sentence sentence CLOSE\n\niff_sent : OPEN IFF sentence sentence CLOSE\n\nnot_sent : OPEN NOT sentence CLOSE\n\ncommentsent : OPEN COMMENT QUOTEDSTRING sentence CLOSE\n\nsentences : sentence sentences\nsentences : sentence\n\nequation : OPEN EQUAL term term CLOSE\n\natom : OPEN term termseq CLOSE\n\nuniversal_quantsent : OPEN FORALL OPEN bvar_list CLOSE sentence CLOSE\n\nexistential_quantsent : OPEN EXISTS OPEN bvar_list CLOSE sentence  CLOSE\n\nbvar_list : bvar bvar_list\n    | bvar\n\nbvar : interpretablename\n    | cseqmark\n    | OPEN interpretablename term CLOSE\n    | OPEN cseqmark term CLOSE\n\nterms : term terms\nterms : term\n\ntermseq : termseq term\n    | termseq SEQMARK\n    | term\n    | SEQMARK\n\nterm : name\n    | OPEN term termseq CLOSE\n    | OPEN COMMENT QUOTEDSTRING term CLOSE\n\nname : interpretedname\n    | interpretablename\n\ninterpretedname : NUMERAL\n    | QUOTEDSTRING\n    | OPEN COMMENT QUOTEDSTRING NUMERAL CLOSE\n    | OPEN COMMENT QUOTEDSTRING QUOTEDSTRING CLOSE\n\ninterpretablename : NAMECHARSEQUENCE\n    | ENCLOSEDNAME\n    | OPEN COMMENT QUOTEDSTRING interpretablename CLOSE\n\ncseqmark : SEQMARK\n    | OPEN COMMENT QUOTEDSTRING SEQMARK CLOSE\n'
    
_lr_action_items = {'OPEN':([0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,62,64,65,67,68,69,70,71,72,73,74,77,78,79,81,83,86,87,89,90,91,92,93,94,97,99,101,104,105,106,108,110,112,113,114,115,117,119,121,122,125,127,128,134,135,137,138,140,141,142,143,145,146,148,150,151,152,153,155,156,157,158,159,160,161,165,168,170,171,173,174,175,176,],[14,30,32,34,-6,-7,-8,-9,-18,-19,35,-33,-34,-35,-36,-37,-21,-22,-38,-39,-40,-41,-42,-43,-44,35,35,-75,65,35,35,75,-73,75,78,79,35,35,35,34,34,34,34,34,-69,-72,-74,-78,-79,35,94,35,65,-13,-14,-15,30,-67,35,-68,30,110,110,35,35,34,34,126,32,34,35,128,35,30,139,-10,-65,-54,-66,-26,144,110,-59,-60,-81,-23,-24,-45,-46,-49,-70,35,-20,-27,-50,-29,161,-25,75,-32,35,35,34,34,-53,-47,-48,-77,-71,-76,-80,75,-28,35,75,128,-61,-62,-56,-55,-31,-82,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,33,101,105,108,117,119,121,122,125,134,135,137,141,143,151,152,153,160,173,174,],[0,-1,-2,-3,-5,-17,-52,-6,-7,-8,-9,-18,-19,-33,-34,-35,-36,-37,-21,-22,-38,-39,-40,-41,-42,-43,-44,-4,-16,-51,-10,-54,-26,-23,-24,-45,-46,-49,-20,-27,-50,-25,-32,-53,-47,-48,-28,-56,-55,]),'CLOSE':([5,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,37,42,54,55,56,57,58,66,67,68,69,70,72,73,74,76,80,81,82,84,85,88,92,95,96,98,101,102,103,104,105,106,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,129,130,131,132,134,135,136,137,141,143,149,151,152,153,155,156,157,158,160,162,163,164,166,167,169,170,171,172,173,174,176,],[-5,-52,-6,-7,-8,-9,-18,-19,-33,-34,-35,-36,-37,-21,-22,-38,-39,-40,-41,-42,-43,-44,-4,-51,-75,-73,-69,-72,-74,-78,-79,101,-12,-13,-14,-15,-67,105,-68,108,117,-64,119,121,122,125,127,134,135,137,-10,-11,141,-65,-54,-66,-26,143,148,-58,-59,-60,-81,150,-23,-63,-24,151,-45,-46,152,153,-49,-70,155,156,157,158,-20,-27,160,-50,-25,-32,-57,-53,-47,-48,-77,-71,-76,-80,-28,158,170,171,173,174,175,-61,-62,176,-56,-55,-82,]),'COMMENT':([14,30,32,34,35,65,75,94,110,126,128,144,161,],[36,59,60,61,63,100,107,100,147,59,154,147,100,]),'TEXT':([14,30,65,94,126,161,],[38,38,38,38,38,38,]),'RESTRICT':([14,30,65,94,126,161,],[39,39,39,39,39,39,]),'IMPORTS':([14,30,65,94,126,161,],[41,41,41,41,41,41,]),'TITLING':([14,32,65,94,161,],[43,43,43,43,43,]),'EXISTS':([14,34,65,94,161,],[44,44,44,44,44,]),'FORALL':([14,34,65,94,161,],[45,45,45,45,45,]),'INDISCOURSE':([14,32,65,94,161,],[46,46,46,46,46,]),'OUTDISCOURSE':([14,32,65,94,161,],[47,47,47,47,47,]),'EQUAL':([14,34,65,94,161,],[48,48,48,48,48,]),'AND':([14,34,65,94,161,],[49,49,49,49,49,]),'OR':([14,34,65,94,161,],[50,50,50,50,50,]),'IF':([14,34,65,94,161,],[51,51,51,51,51,]),'IFF':([14,34,65,94,161,],[52,52,52,52,52,]),'NOT':([14,34,65,94,161,],[53,53,53,53,53,]),'NUMERAL':([14,34,35,37,39,40,42,46,47,48,54,55,56,57,58,62,65,72,73,74,81,83,92,93,94,104,106,115,127,128,145,146,155,156,157,158,161,168,176,],[56,56,56,-75,56,56,-73,56,56,56,-69,-72,-74,-78,-79,56,56,-67,56,-68,56,56,56,131,56,-65,-66,-81,-70,56,56,56,-77,-71,-76,-80,56,131,-82,]),'QUOTEDSTRING':([14,34,35,36,37,39,40,42,46,47,48,54,55,56,57,58,59,60,61,62,63,65,72,73,74,81,83,92,93,94,100,104,106,107,115,127,128,133,145,146,147,154,155,156,157,158,161,168,176,],[37,37,37,64,-75,37,37,-73,37,37,37,-69,-72,-74,-78,-79,89,90,91,37,93,37,-67,37,-68,37,37,37,129,37,140,-65,-66,142,-81,-70,37,159,37,37,165,168,-77,-71,-76,-80,37,129,-82,]),'NAMECHARSEQUENCE':([14,34,35,37,39,40,41,42,43,46,47,48,54,55,56,57,58,62,65,72,73,74,78,79,81,83,92,93,94,104,106,110,112,113,114,115,127,128,142,145,146,155,156,157,158,159,161,165,168,170,171,176,],[57,57,57,-75,57,57,57,-73,57,57,57,57,-69,-72,-74,-78,-79,57,57,-67,57,-68,57,57,57,57,57,57,57,-65,-66,57,57,-59,-60,-81,-70,57,57,57,57,-77,-71,-76,-80,57,57,57,57,-61,-62,-82,]),'ENCLOSEDNAME':([14,34,35,37,39,40,41,42,43,46,47,48,54,55,56,57,58,62,65,72,73,74,78,79,81,83,92,93,94,104,106,110,112,113,114,115,127,128,142,145,146,155,156,157,158,159,161,165,168,170,171,176,],[58,58,58,-75,58,58,58,-73,58,58,58,58,-69,-72,-74,-78,-79,58,58,-67,58,-68,58,58,58,58,58,58,58,-65,-66,58,58,-59,-60,-81,-70,58,58,58,58,-77,-71,-76,-80,58,58,58,58,-61,-62,-82,]),'SEQMARK':([37,40,42,54,55,56,57,58,62,72,73,74,78,79,92,104,106,110,112,113,114,115,127,155,156,157,158,165,170,171,176,],[-75,74,-73,-69,-72,-74,-78,-79,74,-67,106,-68,115,115,106,-65,-66,115,115,-59,-60,-81,-70,-77,-71,-76,-80,172,-61,-62,-82,]),'PREFIX':([94,126,139,161,],[133,133,133,133,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'extended_text':([0,],[1,]),'texts':([0,5,64,89,97,140,],[2,29,96,96,136,96,]),'statements':([0,6,],[3,31,]),'sentences':([0,7,49,50,],[4,33,84,85,]),'text':([0,5,38,64,67,71,77,89,97,140,],[5,5,70,5,70,103,109,5,5,5,]),'statement':([0,6,38,64,67,90,140,],[6,6,69,95,69,95,95,]),'sentence':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[7,7,68,7,7,86,87,88,98,68,123,124,98,98,166,167,]),'textconstruction':([0,5,38,64,67,71,77,89,97,140,],[8,8,8,8,8,8,8,8,8,8,]),'domainrestriction':([0,5,38,64,67,71,77,89,97,140,],[9,9,9,9,9,9,9,9,9,9,]),'importation':([0,5,38,64,67,71,77,89,97,140,],[10,10,10,10,10,10,10,10,10,10,]),'commenttext':([0,5,38,64,67,71,77,89,97,140,],[11,11,11,11,11,11,11,11,11,11,]),'titling':([0,6,38,64,67,90,140,],[12,12,12,12,12,12,12,]),'discoursestatement':([0,6,38,64,67,90,140,],[13,13,13,13,13,13,13,]),'atomsent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'boolsent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'existential_quantsent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'universal_quantsent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'commentsent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'indiscourse':([0,6,38,64,67,90,140,],[20,20,20,20,20,20,20,]),'outdiscourse':([0,6,38,64,67,90,140,],[21,21,21,21,21,21,21,]),'equation':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'atom':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'and_sent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'or_sent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'if_sent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'iff_sent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'not_sent':([0,7,38,49,50,51,52,53,64,67,86,87,91,140,148,150,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'term':([14,34,35,39,40,46,47,48,62,65,73,81,83,92,93,94,128,145,146,161,168,],[40,40,62,71,72,81,81,83,72,40,104,81,120,104,130,40,62,163,164,40,130,]),'interpretablename':([14,34,35,39,40,41,43,46,47,48,62,65,73,78,79,81,83,92,93,94,110,112,128,142,145,146,159,161,165,168,],[42,42,42,42,42,76,77,42,42,42,42,42,42,113,113,42,42,42,132,42,145,113,42,162,42,42,169,42,162,132,]),'name':([14,34,35,39,40,46,47,48,62,65,73,81,83,92,93,94,128,145,146,161,168,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'interpretedname':([14,34,35,39,40,46,47,48,62,65,73,81,83,92,93,94,128,145,146,161,168,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'constructed_texts':([38,67,],[66,102,]),'constructed_text':([38,67,],[67,67,]),'termseq':([40,62,],[73,92,]),'terms':([46,47,81,],[80,82,118,]),'prefixdeclarations':([64,89,99,140,],[97,97,138,97,]),'prefixdeclaration':([64,89,99,140,],[99,99,99,99,]),'bvar_list':([78,79,112,],[111,116,149,]),'bvar':([78,79,112,],[112,112,112,]),'cseqmark':([78,79,110,112,],[114,114,146,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> extended_text","S'",1,None,None,None),
  ('extended_text -> texts','extended_text',1,'p_extended_texts','extended_clif_parser.py',115),
  ('extended_text -> statements','extended_text',1,'p_extended_texts','extended_clif_parser.py',116),
  ('extended_text -> sentences','extended_text',1,'p_extended_texts','extended_clif_parser.py',117),
  ('texts -> text texts','texts',2,'p_texts','extended_clif_parser.py',123),
  ('texts -> text','texts',1,'p_texts','extended_clif_parser.py',124),
  ('text -> textconstruction','text',1,'p_text','extended_clif_parser.py',139),
  ('text -> domainrestriction','text',1,'p_text','extended_clif_parser.py',140),
  ('text -> importation','text',1,'p_text','extended_clif_parser.py',141),
  ('text -> commenttext','text',1,'p_text','extended_clif_parser.py',142),
  ('textconstruction -> OPEN TEXT constructed_texts CLOSE','textconstruction',4,'p_textconstruction','extended_clif_parser.py',152),
  ('constructed_texts -> constructed_text constructed_texts','constructed_texts',2,'p_constructed_texts','extended_clif_parser.py',159),
  ('constructed_texts -> constructed_text','constructed_texts',1,'p_constructed_texts','extended_clif_parser.py',160),
  ('constructed_text -> sentence','constructed_text',1,'p_constructed_text','extended_clif_parser.py',175),
  ('constructed_text -> statement','constructed_text',1,'p_constructed_text','extended_clif_parser.py',176),
  ('constructed_text -> text','constructed_text',1,'p_constructed_text','extended_clif_parser.py',177),
  ('statements -> statement statements','statements',2,'p_statements','extended_clif_parser.py',184),
  ('statements -> statement','statements',1,'p_statements','extended_clif_parser.py',185),
  ('statement -> titling','statement',1,'p_statement','extended_clif_parser.py',200),
  ('statement -> discoursestatement','statement',1,'p_statement','extended_clif_parser.py',201),
  ('statement -> OPEN COMMENT QUOTEDSTRING statement CLOSE','statement',5,'p_statement','extended_clif_parser.py',202),
  ('discoursestatement -> indiscourse','discoursestatement',1,'p_discoursestatement','extended_clif_parser.py',212),
  ('discoursestatement -> outdiscourse','discoursestatement',1,'p_discoursestatement','extended_clif_parser.py',213),
  ('indiscourse -> OPEN INDISCOURSE terms CLOSE','indiscourse',4,'p_indiscourse','extended_clif_parser.py',220),
  ('outdiscourse -> OPEN OUTDISCOURSE terms CLOSE','outdiscourse',4,'p_outdiscourse','extended_clif_parser.py',227),
  ('domainrestriction -> OPEN RESTRICT term text CLOSE','domainrestriction',5,'p_domainrestriction','extended_clif_parser.py',234),
  ('importation -> OPEN IMPORTS interpretablename CLOSE','importation',4,'p_importation','extended_clif_parser.py',241),
  ('commenttext -> OPEN COMMENT QUOTEDSTRING texts CLOSE','commenttext',5,'p_commenttext','extended_clif_parser.py',248),
  ('commenttext -> OPEN COMMENT QUOTEDSTRING prefixdeclarations texts CLOSE','commenttext',6,'p_commenttext','extended_clif_parser.py',249),
  ('prefixdeclarations -> prefixdeclaration prefixdeclarations','prefixdeclarations',2,'p_prefixdeclarations','extended_clif_parser.py',269),
  ('prefixdeclarations -> prefixdeclaration','prefixdeclarations',1,'p_prefixdeclarations','extended_clif_parser.py',270),
  ('prefixdeclaration -> OPEN PREFIX QUOTEDSTRING interpretablename CLOSE','prefixdeclaration',5,'p_prefixdeclaration','extended_clif_parser.py',285),
  ('titling -> OPEN TITLING interpretablename text CLOSE','titling',5,'p_titling','extended_clif_parser.py',292),
  ('sentence -> atomsent','sentence',1,'p_sentence','extended_clif_parser.py',299),
  ('sentence -> boolsent','sentence',1,'p_sentence','extended_clif_parser.py',300),
  ('sentence -> existential_quantsent','sentence',1,'p_sentence','extended_clif_parser.py',301),
  ('sentence -> universal_quantsent','sentence',1,'p_sentence','extended_clif_parser.py',302),
  ('sentence -> commentsent','sentence',1,'p_sentence','extended_clif_parser.py',303),
  ('atomsent -> equation','atomsent',1,'p_atomsent','extended_clif_parser.py',310),
  ('atomsent -> atom','atomsent',1,'p_atomsent','extended_clif_parser.py',311),
  ('boolsent -> and_sent','boolsent',1,'p_boolsent','extended_clif_parser.py',318),
  ('boolsent -> or_sent','boolsent',1,'p_boolsent','extended_clif_parser.py',319),
  ('boolsent -> if_sent','boolsent',1,'p_boolsent','extended_clif_parser.py',320),
  ('boolsent -> iff_sent','boolsent',1,'p_boolsent','extended_clif_parser.py',321),
  ('boolsent -> not_sent','boolsent',1,'p_boolsent','extended_clif_parser.py',322),
  ('and_sent -> OPEN AND sentences CLOSE','and_sent',4,'p_and_sent','extended_clif_parser.py',329),
  ('or_sent -> OPEN OR sentences CLOSE','or_sent',4,'p_or_sent','extended_clif_parser.py',337),
  ('if_sent -> OPEN IF sentence sentence CLOSE','if_sent',5,'p_if_sent','extended_clif_parser.py',345),
  ('iff_sent -> OPEN IFF sentence sentence CLOSE','iff_sent',5,'p_iff_sent','extended_clif_parser.py',352),
  ('not_sent -> OPEN NOT sentence CLOSE','not_sent',4,'p_not_sent','extended_clif_parser.py',359),
  ('commentsent -> OPEN COMMENT QUOTEDSTRING sentence CLOSE','commentsent',5,'p_commentsent','extended_clif_parser.py',366),
  ('sentences -> sentence sentences','sentences',2,'p_sentences','extended_clif_parser.py',374),
  ('sentences -> sentence','sentences',1,'p_sentences','extended_clif_parser.py',375),
  ('equation -> OPEN EQUAL term term CLOSE','equation',5,'p_equation','extended_clif_parser.py',390),
  ('atom -> OPEN term termseq CLOSE','atom',4,'p_atom','extended_clif_parser.py',398),
  ('universal_quantsent -> OPEN FORALL OPEN bvar_list CLOSE sentence CLOSE','universal_quantsent',7,'p_universal_quantsent','extended_clif_parser.py',412),
  ('existential_quantsent -> OPEN EXISTS OPEN bvar_list CLOSE sentence CLOSE','existential_quantsent',7,'p_existential_quantsent','extended_clif_parser.py',426),
  ('bvar_list -> bvar bvar_list','bvar_list',2,'p_bvar_list','extended_clif_parser.py',440),
  ('bvar_list -> bvar','bvar_list',1,'p_bvar_list','extended_clif_parser.py',441),
  ('bvar -> interpretablename','bvar',1,'p_bvar','extended_clif_parser.py',456),
  ('bvar -> cseqmark','bvar',1,'p_bvar','extended_clif_parser.py',457),
  ('bvar -> OPEN interpretablename term CLOSE','bvar',4,'p_bvar','extended_clif_parser.py',458),
  ('bvar -> OPEN cseqmark term CLOSE','bvar',4,'p_bvar','extended_clif_parser.py',459),
  ('terms -> term terms','terms',2,'p_terms','extended_clif_parser.py',466),
  ('terms -> term','terms',1,'p_terms','extended_clif_parser.py',467),
  ('termseq -> termseq term','termseq',2,'p_termseq','extended_clif_parser.py',482),
  ('termseq -> termseq SEQMARK','termseq',2,'p_termseq','extended_clif_parser.py',483),
  ('termseq -> term','termseq',1,'p_termseq','extended_clif_parser.py',484),
  ('termseq -> SEQMARK','termseq',1,'p_termseq','extended_clif_parser.py',485),
  ('term -> name','term',1,'p_term','extended_clif_parser.py',496),
  ('term -> OPEN term termseq CLOSE','term',4,'p_term','extended_clif_parser.py',497),
  ('term -> OPEN COMMENT QUOTEDSTRING term CLOSE','term',5,'p_term','extended_clif_parser.py',498),
  ('name -> interpretedname','name',1,'p_name','extended_clif_parser.py',514),
  ('name -> interpretablename','name',1,'p_name','extended_clif_parser.py',515),
  ('interpretedname -> NUMERAL','interpretedname',1,'p_interpretedname','extended_clif_parser.py',522),
  ('interpretedname -> QUOTEDSTRING','interpretedname',1,'p_interpretedname','extended_clif_parser.py',523),
  ('interpretedname -> OPEN COMMENT QUOTEDSTRING NUMERAL CLOSE','interpretedname',5,'p_interpretedname','extended_clif_parser.py',524),
  ('interpretedname -> OPEN COMMENT QUOTEDSTRING QUOTEDSTRING CLOSE','interpretedname',5,'p_interpretedname','extended_clif_parser.py',525),
  ('interpretablename -> NAMECHARSEQUENCE','interpretablename',1,'p_interpretablename','extended_clif_parser.py',535),
  ('interpretablename -> ENCLOSEDNAME','interpretablename',1,'p_interpretablename','extended_clif_parser.py',536),
  ('interpretablename -> OPEN COMMENT QUOTEDSTRING interpretablename CLOSE','interpretablename',5,'p_interpretablename','extended_clif_parser.py',537),
  ('cseqmark -> SEQMARK','cseqmark',1,'p_cseqmark','extended_clif_parser.py',547),
  ('cseqmark -> OPEN COMMENT QUOTEDSTRING SEQMARK CLOSE','cseqmark',5,'p_cseqmark','extended_clif_parser.py',548),
]
